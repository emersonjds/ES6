{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AACE,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,SAAS,eAAf;;AAEA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;IAEaC,iB,WAAAA,iB;AAEX,+BAAc;AAAA;;AAEZ,UAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;oCAEsB;;AAErB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;AACAS,oBAAYI,eAAZ,GAA8B,aAAK;AACjCT,4BAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,SAFD;;AAIAR,oBAAYS,SAAZ,GAAwB,aAAK;AAC3B,cAAI,CAAChB,UAAL,EACEA,aAAaa,EAAEC,MAAF,CAASC,MAAtB;;AAEFd,kBAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR,CAJ2B,CAIe;;AAE1CA,qBAAWC,KAAX,GAAmB,YAAM;AACvB,kBAAM,IAAIE,KAAJ,CAAU,kDAAV,CAAN;AACD,WAFD;;AAIAE,kBAAQL,UAAR;AACD,SAXD;;AAaAO,oBAAYW,OAAZ,GAAsB,aAAK;AACzBC,kBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,iBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB,EAFyB,CAEG;AAC7B,SAHD;AAID,OAvBM,CAAP;AAwBD;;;kCAEoBtB,U,EAAY;AAC/BH,aAAO0B,OAAP,CAAe,iBAAS;AACtB,YAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACjD1B,mBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,OAHD;AAID;;;sCAEwB;AACvB,UAAI7B,UAAJ,EACEC;AACFkB,cAAQC,GAAR,CAAY,mCAAZ;AACApB,mBAAa,IAAb;AACD","file":"ConnectionFactory.js","sourcesContent":["\n  const stores = ['negociacoes']\n  const version = 4\n  const dbName = 'negociacoesDB'\n\n  let connection = null\n  let close = null\n\n  export class ConnectionFactory {\n\n    constructor() {\n\n      throw new Error('Não é possível criar instâncias de ConnectionFactory')\n    }\n\n    static getConnection() {\n\n      return new Promise((resolve, reject) => {\n        let openRequest = window.indexedDB.open(dbName, version)\n        openRequest.onupgradeneeded = e => {\n          ConnectionFactory._createStores(e.target.result)\n        }\n\n        openRequest.onsuccess = e => {\n          if (!connection)\n            connection = e.target.result\n\n          close = connection.close.bind(connection) // associando o metodo close a variavel close\n\n          connection.close = () => {\n            throw new Error('Voce nao pode invocar o metodo close diretamente')\n          }\n\n          resolve(connection)\n        }\n\n        openRequest.onerror = e => {\n          console.log(e.target.error)\n          reject(e.target.error.name) //string com erro retornado\n        }\n      })\n    }\n\n    static _createStores(connection) {\n      stores.forEach(store => {\n        if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store)\n        connection.createObjectStore(store, { autoIncrement: true })\n      })\n    }\n\n    static closeConnection() {\n      if (connection)\n        close()\n      console.log('A conexao foi fechada com sucesso')\n      connection = null\n    }\n\n    \n  }\n\n\n\n\n"]}